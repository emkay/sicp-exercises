1.1 - The Elements of Programming
	3 Mechanisms for combining simple ideas to form complex ones. 
		1. Primitive expressions - the simplest entities the language is concerned with. 
		2. Means of combinations - compound elements are built from simpler ones.
		3. Means of abstraction - compound elements can be named and manipulated as units. ie. (define)

1.1.1 - Expressions 
	Combinations - Expressions formed by delimiting a list of expressions within parentheses in order to denote procedure application.
	The value is obtained by applying the procedure (operator) to the arguments (values of the operands).

	Operator - Leftmost element in the list.

	Operands - all the other elements.

	Prefix notations - convention of placing the operator to the left of the operands. 
	Advantages: Procedures can take arbitrary number of arguments, no ambiguity, allows combinations to be nested in a straightforward way.

	read-eval-print-loop (repl) - the interpreters cycle:
		1. Read expression from terminal.
		2. Evaluate the expression.
		3. Print the result.

1.1.2 - Naming and the Environment
	Variable - name that identifies the object.
	
	Value - the object itself.
	In Scheme you name things with "define". It allows for the simplest means of abstraction.
	
	Global Environment - memory that keeps track of name-object pairs.

1.1.3 - Evaluating Combinations
	1. Evaluate the subexpressions of the combination.
	2. Apply the procedure that is the value of the leftmost subexpression (the operator) to the arguments that are the values of the other subexpressions (the operands).

	Evaluation rule is recursive in nature - 
	one of its steps is to invoke the rule itself.

	Tree accumulation - viewing evaluation in terms of the tree, values of the operands percolate upward starting from the terminal nodes, then combining at higher and higher levels.

	Special forms - exceptions to the general evaluation rule.
	Example: (define x 3) - does not apply "define" to two arguments.

1.1.4 - Compound Procedures
	Procedure definitions - compound operation can be given a name and then referred to as a unit.

1.1.5 - The Substitution Model for Procedure Application
	The purpose of the substitution model is to help us think about procedure application. Not how the interpreter really works.

	Applicative order versus normal order - 
		Normal order evaluation -  Evaluate the operands as their values are needed. Substitute operand expressions for parameters until it obtains an expression involving only primitive operators,
		then evaluate. (Fully expand and then reduce).
		Applicative-order evaluation - evaluate the arguments and then apply.

1.1.6 - Conditional Expressions and Predicates
	Cond - case analysis - special form 
		Predicate evaluated first - if false p2 is evaluated. Process continues until a predicate is found true. The interpreter then returns the value of the consequence exp. If none are true,
		cond returns undefined.

	Predicate - procedures that return true or false as well as for expressions that eval true or false.

	Else - special symbol that can be used in place of predicate in final clause of a cond.

	If - Special form - restricted type of conditional that can be used when there are precisely two cases in the case analysis.




Lecture notes - 1-a
	Instructor - Harold Abelson
	
	Procedure::spells, Processes::spirits.
	
	Computer Science - Abstract form of engineering. 
	
	Techniques for controlling complexity - what this course is really about. 
		1. Black box abstraction - suppress detail for building bigger boxes, instance of a more general thing.
			36 -> <box>to find sqrt of x</box> -> 6
			Primitive objects
				data 
				procedures
			Means of combination
				procedure composition
				construction of compound data
			Means of abstraction
				procedure definition
				simple data abstraction
			Capturing common patterns
				Higher-order procedures
				Data as procedures
		
		2. Conventional Interfaces
			Generic operations
			Large scale structure and modularity
			object oriented programming
			operations on aggregates

		3. Metalinguistic Abstraction
			solving complex problems by creating a new language or vocabulary to better understand the problem space. (DSL - domain specific language).
	
